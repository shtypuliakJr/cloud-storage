version: '3.8'

services:

  cs-file-service:
    build:
      context: ../file-service
      dockerfile: ./docker/Dockerfile
      args:
        VERSION: undefined
    depends_on:
      - db-cloud-storage
      - cloud-storage-minio
    ports:
      - "8010:80"
      - "6001:6001"
    environment:
      AWS_ACCESS_KEY_ID: dummy_key
      AWS_SECRET_ACCESS_KEY: dummy_secret
      AWS_DEFAULT_REGION: us-east-1
      ENV_VAR_NAME: ${COMPOSE_PROJECT_NAME}
    networks:
      - ${NETWORK_NAME}


  cs-meta-service:
    build:
      context: ../meta-service
      dockerfile: ./docker/Dockerfile
      args:
        VERSION: undefined
    depends_on:
      - db-cloud-storage
      - cloud-storage-minio
    hostname: cs-meta-service
    ports:
      - "8011:80"
      - "6002:6001"
    environment:
      AWS_ACCESS_KEY_ID: dummy_key
      AWS_SECRET_ACCESS_KEY: dummy_secret
      AWS_DEFAULT_REGION: us-east-1
      ENV_VAR_NAME: ${COMPOSE_PROJECT_NAME}
    networks:
      - ${NETWORK_NAME}


  cs-notification-service:
    build:
      context: ../notification-service
      dockerfile: ./docker/Dockerfile
      args:
        VERSION: undefined
    depends_on:
      - db-cloud-storage
    hostname: cs-notification-service
    ports:
      - "8012:80"
      - "6003:6001"
    environment:
      AWS_ACCESS_KEY_ID: dummy_key
      AWS_SECRET_ACCESS_KEY: dummy_secret
      AWS_DEFAULT_REGION: us-east-1
      ENV_VAR_NAME: ${COMPOSE_PROJECT_NAME}
    networks:
      - ${NETWORK_NAME}


  db-cloud-storage:
    image: postgres:12.4-alpine
    container_name: db-cloud-storage
    hostname: db-cloud-storage
    volumes:
      - mpgdata:/var/lib/postgresql/data-postgres-cloud-storage
    expose:
      - 5440
    ports:
      - "5440:5440"
    command: -p 5440
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cloud-storage_db
      ENV_VAR_NAME: ${COMPOSE_PROJECT_NAME}
    networks:
      - ${NETWORK_NAME}


  cloud-storage-minio:
    image: minio/minio:RELEASE.2023-03-09T23-16-13Z
    container_name: cloud-storage-minio
    hostname: cloud-storage-minio
    volumes:
      - ./minio/s3:/data
    ports:
      - "9002:9000"
      - "9003:9001"
    entrypoint: sh
    command: -c 'mkdir -p /data/cs-dev && minio server /data --console-address ":9001"'
    environment:
      MINIO_DOCKER_NAME: cloud-storage-minio
      MINIO_ROOT_USER: dummy_key
      MINIO_ROOT_PASSWORD: dummy_secret
      ENV_VAR_NAME: ${COMPOSE_PROJECT_NAME}
    networks:
      - ${NETWORK_NAME}


  cs-localstack:
    image: localstack/localstack:0.12.16
    container_name: cs-localstack
    hostname: cs-localstack
    ports:
      - '4566-4597:4566-4597'
    environment:
      - SERVICES=sqs
      - DEBUG=true
      - DEFAULT_REGION=us-east-1
      - SQS_DOCKER_NETWORK=docker_cs_network
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOSTNAME_EXTERNAL=cs-localstack
      - AWS_ACCESS_KEY_ID=dummy_key
      - AWS_SECRET_ACCESS_KEY=dummy_secret
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - ./localstack_setup:/docker-entrypoint-initaws.d
      - "${TMPDIR:-/tmp/localstack}:/tmp/localstack"
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ${NETWORK_NAME}

#  redis:
#    image: redis:latest
#    restart: always
#    ports:
#      - "6379:6379"
#    volumes:
#      - /path/to/local/d–∞ta:/root/redis
#      - /path/to/local/redis.conf:/usr/local/etc/redis/redis.conf
#    environment:
#      - REDIS_PASSWORD=my-password
#      - REDIS_PORT=6379
#      - REDIS_DATABASES=16


volumes:
  mpgdata:
    driver: local
networks:
  cs_network:
    driver: bridge